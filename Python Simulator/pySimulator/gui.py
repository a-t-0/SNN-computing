import os
import tkinter as tk
import networkx as nx
from tkinter import filedialog

class NetworkGUI:
    def __init__(self, graph):
        self.canvas_width = 800
        self.canvas_height = 500
        self.padding = 25
        self.graph = graph
        top = tk.Tk()
        rootframe = tk.Frame(top)
        menuframe = tk.Frame(rootframe)

        menu = tk.Menu(menuframe)
        top.config(menu=menu)
        fileMenu = tk.Menu(menu)
        fileMenu.add_command(label='open', command=self.open_file)
        fileMenu.add_command(label='quit', command=top.destroy)
        menu.add_cascade(label='File', menu=fileMenu)

        menuframe.pack(side = tk.TOP)

        canvasframe = tk.Frame(rootframe)
        self.canvas = tk.Canvas(canvasframe, width=800, height=500, bg='white')
        self.draw_graph()
        self.canvas.pack()
        canvasframe.pack(side = tk.BOTTOM)
        rootframe.pack()
        top.mainloop()

    def open_file(self):
        openloc = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        file = filedialog.askopenfilename(initialdir=openloc, title="Select Network File")
        print(file)

    def draw_graph(self):
        '''
        TODO:
            currently, the graph area is hardcoded to be square and 50 pixels smaller than the canvas to make sure all nodes
            are drawn completely, fix ugly hardcoded positioning and maybe make dynamic?
        '''
        layout = nx.spring_layout(self.graph)
        # networkx places nodes in a box centered at zero, if scale is specified as x, then nodes will be in
        # [-x, x]

        #  Nodes
        for node in layout.keys():
            pos = layout[node]
            # shift positions to right upper quadrant instead of centered around 0
            x,y = pos[0], pos[1]
            x,y = self._translate_pos(x,y)
            self.place_node(x,y, label=node)

        #  Connections

        for edge in self.graph.edges():
            n1, n2 = edge
            n1pos = layout[n1]
            n2pos = layout[n2]
            x1,y1 = self._translate_pos(n1pos[0], n1pos[1])
            x2,y2 = self._translate_pos(n2pos[0], n2pos[1])
            self.draw_connection((x1,y1), (x2,y2))



    def place_node(self, xpos, ypos, label=":)", diam=20):
        x1 = xpos - diam/2
        y1 = ypos - diam/2
        x2 = xpos + diam/2
        y2 = ypos + diam/2
        
        self.canvas.create_oval(x1,y1,x2,y2,outline="black", fill="black")
        label = tk.Label(self.canvas, text=label).place(x=xpos, y=ypos)
        


    def draw_connection(self, n1pos, n2pos):
        self.canvas.create_line(n1pos[0], n1pos[1], n2pos[0], n2pos[1])


    def _translate_pos(self, x,y, padding=50):
        '''
        translate position generated by networkx to canvas position
        '''
        xmin, xmax = self.padding, self.canvas_width - self.padding
        ymin, ymax = self.padding, self.canvas_height - self.padding
        
        scale_width = xmax - xmin
        scale_height = ymax - ymin 

        # convert layout locations to range 0,1, then rescale to canvas size taking into account padding
        x = ((x + 1) / 2) * scale_width + self.padding
        y = ((y + 1) / 2) * scale_height + self.padding
        return x, y



if __name__ == "__main__":
    G = nx.Graph()
    G.add_node(1)
    G.add_node(2)
    G.add_node(3)
    G.add_edge(1,2)
    G.add_edge(2,3)
    G.add_edge(3,1)

    gui = NetworkGUI(G)
